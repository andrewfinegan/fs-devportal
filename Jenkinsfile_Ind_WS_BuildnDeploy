@Library('relteamlibrary') _

def build_failure = false

pipeline {

    agent { label 'openshift' }
    

    stages {

        stage("OpenShift-Connection and Build Preparation") {

            steps {

                script {
                    
                    env.GIT_APPROVER = sh (script: 'git log -1 --pretty=%cn ${GIT_COMMIT}', returnStdout: true).trim()
                    env.GIT_AUTHOR = sh (script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
    
                    println("PR approved by ${env.GIT_APPROVER}:   PR created by ${env.GIT_AUTHOR}:")
                    
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "Started for PR (Created By: ${env.GIT_AUTHOR}, Approved By: ${env.GIT_APPROVER}) in ${WORKSPACE_NAME} ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: '#648c11'
    
                    
                    //List of excluded workspace/project for this pipeline
                    def controlled_env = 'dev-developer-portal,qa-developer-portal,stage-developer-portal,prod-developer-portal'
                    
                    if (controlled_env.contains("${WORKSPACE_NAME}")) {
                         
                         build_failure = true
                         slackSend channel: 'tos-jenkins-portal-alerts', message: "STOP! This Pipeline does not support Build and Deployment in ${WORKSPACE_NAME}! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'danger'

                    }else {

                        bitbucketStatusNotify( buildState: 'INPROGRESS' )
                        
                        def mystat = "${currentBuild.previousBuild.result}"
    
                        println("Proevious Build Status: $mystat")
    
                        while(mystat == 'null') {
                            println("Wating for Previous Build completion...")
                            slackSend channel: 'tos-jenkins-portal-alerts', message: "Wating for Previous Build completion  ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: '#ffff00'
                            sleep 60
                            println("Again checking Previous Build Status")
                            mystat = "${currentBuild.previousBuild.result}"
    
                            if (mystat != 'null') {
                                println("Proevois Build Status: $mystat")
                                println("Proceeding with Pipeline ...")
    
                                slackSend channel: 'tos-jenkins-portal-alerts', message: "Reassuming Build ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: '#648c11'
    
                            }
    
                        }
    
                        status = loginToOpenShift()
                        echo "${status}"
                        
                    }
                }

            }
        }

		stage("Build") {
        
            when {

                 expression { build_failure == false }

            }

            steps {

		        script {

		            slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME} Build Started ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: '#ff8c00'

                    status = sh (
                   		script: '''

                    		oc project $WORKSPACE_NAME
                            #remove DC image triggers to stop auto deployment once latest image is avaialble
                            oc set triggers dc $APP_NAME --remove-all
                            oc set triggers dc $APP_NAME --from-config
                            oc patch bc $APP_NAME -p '{"spec":{"source":{"git":{"ref":"'$GIT_BRANCH'"}}}}'
                            oc start-build $APP_NAME -F 2>&1 | tee error.txt
                    		cat error.txt

                    	''',
                   		returnStdout: true
                   	).trim()

                    echo "BC Build Related Message: ${status}"
                    if (status.contains('build error:') || status.contains('Error from server (NotFound)') || status.contains('error: A project named') || status.contains('timed out waiting for the condition')) {

                        build_failure = true
                        bitbucketStatusNotify ( buildState: 'FAILED' )
                        slackSend channel: 'tos-jenkins-portal-alerts', message: "PR (Created By: ${env.GIT_AUTHOR}, Approved By: ${env.GIT_APPROVER}) ${APP_NAME} Build Failed in ${WORKSPACE_NAME}! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'danger'


                    } else {

                         slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME} Build Completed successfully! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: '#ff8c00'

                    }
                }
            }

            post {

                failure {

                    script{

                        echo 'Build Stage failed!'

                        bitbucketStatusNotify ( buildState: 'FAILED' )
                        build_failure = true
                        slackSend channel: 'tos-jenkins-portal-alerts', message: "PR (Created By: ${env.GIT_AUTHOR}, Approved By: ${env.GIT_APPROVER}) ${APP_NAME} Build Failed in ${WORKSPACE_NAME}! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'danger'
                    }
                }
            }

		}

		stage("JUnit") {

            when {

                 expression { build_failure == false }

            }

            steps {

		        script {

		            slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME} Junit Build Started ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: '#00bfff'

                    status = sh (
                   		script: '''
                            cd $WORKSPACE

                            mkdir -p test-reports
                            cd $WORKSPACE/tenant-portal-platform

                            go test main_test.go -v 2>&1 | /opt/jenkins/go/bin/go-junit-report > $WORKSPACE/test-reports/report.xml

                    		echo "${APP_NAME} Junit Build completed Successfully!"

                    	''',
                   		returnStdout: true
                   	).trim()

                    echo "${status}"
                }
            }

            post {

                failure {

                    echo 'Junit failed!'

                    bitbucketStatusNotify ( buildState: 'FAILED' )
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "PR (Created By: ${env.GIT_AUTHOR}, Approved By: ${env.GIT_APPROVER}) ${APP_NAME} Junit Build Failed in ${WORKSPACE_NAME}! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'danger'

                }

                success {

                    slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME} Junit Build Completed successfully! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: '#00bfff'

                }

                always {

                    dir("$env.WORKSPACE/test-reports") {

                        echo 'Binding Junit Build Result to UI...'

                      	junit 'report.xml'

                        echo 'Binding Junit Build Result to UI completed successfully.'
                    }

                }
            }

		}

        stage("Dev Deployment") {

            when {
                 expression { build_failure == false }

            }

            steps {

                script {

                    script {

                        slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME} Dev Deployment Started ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: 'good'

                        status = sh (
                       		script: '''

                        		oc project $WORKSPACE_NAME
                                #Add image Trigger back to enable DC to rollout latest image
                                sleep 30
                                oc set triggers dc $APP_NAME --from-image $APP_NAME:latest -c $APP_NAME
                                sleep 2
                                #oc rollout latest dc/$APP_NAME
                                oc rollout status dc/$APP_NAME -w=true

                        		echo "${APP_NAME} Deployment completed Successfully!"

                        	''',
                       		returnStdout: true
                       	).trim()

                        echo "${status}"
                    }
                }
            }

            post {

                success {

                    echo 'DEV Deployment completed successfully!'
                    bitbucketStatusNotify ( buildState: 'SUCCESSFUL' )
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME} Dev Deployment Completed Successfully! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'good'

                }

                failure {

                    echo 'DEV Deployments failed.'
                    bitbucketStatusNotify ( buildState: 'FAILED' )
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "PR (Created By: ${env.GIT_AUTHOR}, Approved By: ${env.GIT_APPROVER}) ${APP_NAME} Dev Deployment Failed in ${WORKSPACE_NAME}! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'danger'

                }
            }
        }
    }
}