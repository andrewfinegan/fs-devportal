/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0-oas3
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"context"
	"devportal/api/product"
	"devportal/config"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/sirupsen/logrus"
)

var cfg config.Config
var logger = logrus.New()

// Main method for the tenant server application
func main() {
	logger.Info("Sample Tenant Server started on port 8080")
	router := NewRouter()

	//Configure server
	srv := &http.Server{
		Addr: "localhost:8080",
		// Good practice to set timeouts to avoid Slowloris attacks.
		WriteTimeout: time.Second * 15,
		ReadTimeout:  time.Second * 15,
		IdleTimeout:  time.Second * 60,
		Handler:      router, // Pass our instance of gorilla/mux in.
	}

	readConfig()

	go func() {
		if err := srv.ListenAndServe(); err != nil {
			logger.Error("Cant not start server due to error: ", err)
		}
	}()

	c := make(chan os.Signal, 1)
	// We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)
	// SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.
	signal.Notify(c, os.Interrupt)

	// Block until we receive our signal.
	<-c

	// Create a deadline to wait for.
	ctx, cancel := context.WithTimeout(context.Background(), 2000)
	defer cancel()
	// Doesn't block if no connections, but will otherwise wait
	// until the timeout deadline.
	srv.Shutdown(ctx)
	// Optionally, you could run srv.Shutdown in a goroutine and block on
	// <-ctx.Done() if your application should wait for other services
	// to finalize based on context cancellation.
	logger.Info("Shutting down the server")
	os.Exit(0)

}

func readConfig() {
	config.ReadFile(&cfg)
	config.ReadEnv(&cfg)

	cfg.GitHub.GitHubContentFullPath = cfg.GitHub.GitHubRawContentHost + "/" + cfg.GitHub.GitHubSourceOwner + "/" + cfg.GitHub.GitHubSourceRepo + "/" + cfg.GitHub.GitHubContentBranch + "/"
	product.DevPortalConfig = cfg

	logger.Debugf("%+v", cfg)
}
