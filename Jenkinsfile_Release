@Library('relteamlibrary') _

def build_failure = false
def job_name = "${env.JOB_NAME}"
def APP_NAME_IN_MSG = job_name.split('/')[-1].split('_')[0]

pipeline {

    agent none
    
    stages {

        stage("Build Preparation") {
            
            agent { label 'build' }
            
            when {

                expression {env.SKIP_BUILD_N_UPLOAD == 'NO'}

            }

            steps {

                script {

                    bitbucketStatusNotify( buildState: 'INPROGRESS' )
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "QA Build (Branch : ${GIT_BRANCH}) has been started ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: '#648c11'

                }
            }
        }

		stage("Build") {
        
            when {

                expression {env.SKIP_BUILD_N_UPLOAD == 'NO'}

            }
		    
		    agent {
		        
                    kubernetes { 
                        
                        yamlFile "kaniko.yaml"
                }
            }

            steps {

				script {

		            slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME_IN_MSG} Build Started ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: '#ff8c00'

                    branch_full_name = env.GIT_BRANCH
                    branch_name = branch_full_name.split('/')[1]
                    echo "Branch Name is : ${branch_name}"

                    def myparam = ['REL_BRANCH':"$env.GIT_BRANCH"]
                    TRACKING_TKT = getTrTktFrmRelBranch(myparam)
                    
                    echo "Tracking Ticket is: ${TRACKING_TKT}"

                    git branch: "$branch_name", url: "${GIT_URL}" , credentialsId: '09d9e8f0-0ae0-4af2-987a-aeacfdd0354b'
                    
                    container(name: 'kaniko', shell: '/busybox/sh') {
                        
                        withEnv(['PATH+EXTRA=/busybox']) {
                            
                            sh '''#!/busybox/sh
                                TRACKING_TKT=$(echo $GIT_BRANCH| cut -d'-' -f 3)'-'$(echo $GIT_BRANCH| cut -d'-' -f 4)
                                APP_NAME=$(echo $JOB_NAME | awk -F"/|_" '{print tolower($4)}')
                                /kaniko/executor --context ${CONTEXT_DIR} --dockerfile ${CONTEXT_DIR}/Dockerfile --destination us.icr.io/developer-portal/${APP_NAME}:${TRACKING_TKT}
                            '''
                        }
                    }
                }
                
            }
            
            post {

                failure {

                    script{

                        echo 'Build Stage failed!'

                        bitbucketStatusNotify ( buildState: 'FAILED' )
                        build_failure = true
                        slackSend channel: 'tos-jenkins-portal-alerts', message: "QA (Branch : ${GIT_BRANCH}) ${APP_NAME_IN_MSG} Build Failed! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'danger'
                    }
                }
                
                success {

                    echo 'Build Completed and Image Uploaded successfully!'
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME_IN_MSG} Build and Image Upload Completed Successfully! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: '#ff8c00'

                }
            }

		}
		
        stage("QA Deployments Approval after DBRQ Execution") {
            
            agent { label 'openshift' }

            when {

                expression {env.SKIP_QADEPLOYMENTS == 'NO'}

            }

            steps {


                timeout(time:30, unit: 'DAYS'){

                    input message: "Approve ${APP_NAME_IN_MSG} QA Deployments for ${GIT_BRANCH}?"

                }
            }
        }

        stage("QA Deployment") {
            
            agent { label 'openshift' }

            when {

                 expression { env.SKIP_QADEPLOYMENTS == 'NO'}

            }

            steps {

                script {

                    script {
                        
                        status = loginToOpenShift()
		                echo "${status}"

                        slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME_IN_MSG} QA Deployment Started ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: 'good'

                        status = sh (
                       		script: '''
                                TRACKING_TKT=$(echo $GIT_BRANCH| cut -d'-' -f 3)'-'$(echo $GIT_BRANCH| cut -d'-' -f 4)
                                
                                #Selecting QA NameSpace(NS)
                        		oc project qa-developer-portal
                                
                        		#Selecting Application
                        		APP_NAME=$(echo $JOB_NAME | awk -F"/|_" '{print tolower($4)}')
                        		
                                # Copying the image in internal image registry
                                oc tag us.icr.io/developer-portal/${APP_NAME}:${TRACKING_TKT} ${APP_NAME}:${TRACKING_TKT}
                                
                                #Remove all Triggers
                                oc set triggers dc ${APP_NAME} --remove-all
                                
                                #Enable Back Config Trigger
                                oc set triggers dc ${APP_NAME} --from-config  
                                
                                oc set triggers dc ${APP_NAME} --from-image ${APP_NAME}:${TRACKING_TKT} -c ${APP_NAME}  

                                #oc rollout latest dc/${APP_NAME}
                                oc rollout status dc/${APP_NAME} -w=true
                                
                                sleep 10

                        		echo "${APP_NAME} QA Deployment completed Successfully!"

                        	''',
                       		returnStdout: true
                       	).trim()

                        echo "${status}"
                    }
                }
            }

            post {

                success {

                    echo 'QA Deployment completed successfully!'
                    bitbucketStatusNotify ( buildState: 'SUCCESSFUL' )
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME_IN_MSG} QA Deployment Completed Successfully! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'good'

                }

                failure {

                    echo 'QA Deployments failed.'
                    bitbucketStatusNotify ( buildState: 'FAILED' )
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "QA (Branch : ${GIT_BRANCH}) ${APP_NAME_IN_MSG} Deployment Failed! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'danger'

                }
            }
        }
        
        stage("Stage Deployments Approval after DBRQ Execution") {
            
            agent { label 'openshift' }

            when {

                expression {env.SKIP_STAGEDEPLOYMENTS == 'NO'}

            }

            steps {


                timeout(time:30, unit: 'DAYS'){

                    input message: "Approve ${APP_NAME_IN_MSG} Stage Deployments for ${GIT_BRANCH}?"

                }
            }
        }

        stage("Stage Deployment") {
            
            agent { label 'openshift' }

            when {

                 expression { env.SKIP_STAGEDEPLOYMENTS == 'NO'}

            }

            steps {

                script {

                    script {
                        
                        status = loginToOpenShift()
		                echo "${status}"

                        slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME_IN_MSG} Stage Deployment Started ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)...", color: 'good'

                        status = sh (
                       		script: '''
                                TRACKING_TKT=$(echo $GIT_BRANCH| cut -d'-' -f 3)'-'$(echo $GIT_BRANCH| cut -d'-' -f 4)
                                
                                #Selecting Stage NameSpace(NS)
                        		oc project stage-developer-portal
                        		
                        		#Selecting Application
                        		APP_NAME=$(echo $JOB_NAME | awk -F"/|_" '{print tolower($4)}')
                        		
                                # Copying the image in internal image registry
                                oc tag us.icr.io/developer-portal/${APP_NAME}:${TRACKING_TKT} ${APP_NAME}:${TRACKING_TKT}
                                
                                #Remove all Triggers
                                oc set triggers dc ${APP_NAME} --remove-all
                                
                                #Enable Back Config Trigger
                                oc set triggers dc ${APP_NAME} --from-config  
                                
                                oc set triggers dc ${APP_NAME} --from-image ${APP_NAME}:${TRACKING_TKT} -c ${APP_NAME}  

                                #oc rollout latest dc/${APP_NAME}
                                oc rollout status dc/${APP_NAME} -w=true
                                
                                sleep 10

                        		echo "${APP_NAME} Stage Deployment completed Successfully!"

                        	''',
                       		returnStdout: true
                       	).trim()

                        echo "${status}"
                    }
                }
            }

            post {

                success {

                    echo 'Stage Deployment completed successfully!'
                    bitbucketStatusNotify ( buildState: 'SUCCESSFUL' )
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "${APP_NAME_IN_MSG} Stage Deployment Completed Successfully! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'good'

                }

                failure {

                    echo 'Stage Deployments failed.'
                    bitbucketStatusNotify ( buildState: 'FAILED' )
                    slackSend channel: 'tos-jenkins-portal-alerts', message: "Stage (Branch : ${GIT_BRANCH}) ${APP_NAME_IN_MSG} Deployment Failed! ${env.JOB_NAME} Build# ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", color: 'danger'

                }
            }
        }
    }
}